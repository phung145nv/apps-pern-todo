{"ast":null,"code":"var _jsxFileName = \"E:\\\\apps\\\\client\\\\src\\\\components\\\\EditTodo.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Fragment, useState } from 'react';\nimport \"./../assets/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditTodo = ({\n  todo,\n  getTodos\n}) => {\n  _s();\n  const [description, setDescription] = useState(todo.description);\n  const [clickedEdit, setClickEdit] = useState(false);\n  const handleEdit = async (e, id) => {\n    e.preventDefault();\n    const body = {\n      description\n    };\n    try {\n      console.log(id);\n      const response = await fetch(`http://localhost:5000/todos/${todo.todo_id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body\n        })\n      });\n      if (response.ok) {\n        console.log(\"update od\");\n        getTodos();\n      } else {\n        console.error(\"Failed to update todo.\");\n      }\n    } catch (err) {\n      console.err(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => setClickEdit(true),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), clickedEdit && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-custom justify-content-center d-flex\",\n        id: `modal${todo}`,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          className: \"mt-5\",\n          onSubmit: e => {\n            handleEdit(e, todo.todo_id);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: description,\n            onChange: e => setDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-success\",\n            children: \"Agree\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setClickEdit(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(EditTodo, \"2NE2uRO6iJKVnznWVHQfQ9JEQ8Q=\");\n_c = EditTodo;\nexport default EditTodo;\nvar _c;\n$RefreshReg$(_c, \"EditTodo\");","map":{"version":3,"names":["Fragment","useState","jsxDEV","_jsxDEV","_Fragment","EditTodo","todo","getTodos","_s","description","setDescription","clickedEdit","setClickEdit","handleEdit","e","id","preventDefault","body","console","log","response","fetch","todo_id","method","headers","JSON","stringify","ok","error","err","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","action","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["E:/apps/client/src/components/EditTodo.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Fragment, useState } from 'react';\r\nimport \"./../assets/style.css\"\r\n\r\nconst EditTodo =({todo, getTodos}) =>\r\n{\r\n    const [description, setDescription] = useState(todo.description);\r\n    const [clickedEdit, setClickEdit] = useState(false);\r\n    const handleEdit = async (e, id) =>\r\n    {\r\n        e.preventDefault();\r\n        const body = {description}\r\n        try {\r\n            console.log(id)\r\n            const response = await fetch(`http://localhost:5000/todos/${todo.todo_id}`,\r\n            {method : \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({body})\r\n            })\r\n            if (response.ok) \r\n            {\r\n                console.log(\"update od\")\r\n                getTodos();\r\n            } else {\r\n                console.error(\"Failed to update todo.\");\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.err(err);\r\n        }\r\n\r\n\r\n    }\r\n    return (     \r\n        <Fragment>\r\n            <button className='btn btn-primary' onClick={() => setClickEdit(true)}>Edit</button>\r\n            {clickedEdit && \r\n            <>\r\n                <div className='modal-custom justify-content-center d-flex' id={`modal${todo}`}>\r\n\r\n                    <form action=\"\" className='mt-5' onSubmit={(e) => {\r\n\r\n                        handleEdit(e, todo.todo_id)}}>\r\n                        <input type=\"text\"  value={description} onChange={(e) => setDescription(e.target.value)}/>\r\n                        <button type='submit' className='btn btn-success'  >Agree</button>\r\n                        <button type='button' onClick={()=>setClickEdit(false)}>Close</button>\r\n                    </form>\r\n                </div>\r\n            </>\r\n            } \r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EditTodo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}